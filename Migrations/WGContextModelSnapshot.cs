// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeGout;

#nullable disable

namespace WeGout.Migrations
{
    [DbContext(typeof(WGContext))]
    partial class WGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeGout.Entities.CL_Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("CL_Gender");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Male"
                        });
                });

            modelBuilder.Entity("WeGout.Entities.FileStorage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FileStorage");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Extension = "jpg",
                            Name = "none",
                            Path = "none"
                        });
                });

            modelBuilder.Entity("WeGout.Entities.Owner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("WeGout.Entities.Place", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("BannerPhotoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geometry>("Location")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BannerPhotoId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("WeGout.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Coin")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastSignIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProfilePhotoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("ProfilePhotoId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Coin = 0L,
                            Email = "ugur@wegout.com",
                            GenderId = 1L,
                            LastSignIn = new DateTime(2021, 11, 21, 14, 16, 0, 381, DateTimeKind.Utc).AddTicks(2398),
                            Name = "Ugurcan",
                            Password = "12345",
                            PhoneNumber = "05398478481",
                            ProfilePhotoId = 1L,
                            SignUpDate = new DateTime(2021, 11, 21, 14, 16, 0, 381, DateTimeKind.Utc).AddTicks(2403),
                            Surname = "Bagriyanik"
                        });
                });

            modelBuilder.Entity("WeGout.Entities.Owner", b =>
                {
                    b.HasOne("WeGout.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeGout.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WeGout.Entities.Place", b =>
                {
                    b.HasOne("WeGout.Entities.FileStorage", "BannerPhoto")
                        .WithMany()
                        .HasForeignKey("BannerPhotoId");

                    b.Navigation("BannerPhoto");
                });

            modelBuilder.Entity("WeGout.Entities.User", b =>
                {
                    b.HasOne("WeGout.Entities.CL_Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeGout.Entities.FileStorage", "ProfilePhoto")
                        .WithMany()
                        .HasForeignKey("ProfilePhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("ProfilePhoto");
                });
#pragma warning restore 612, 618
        }
    }
}
